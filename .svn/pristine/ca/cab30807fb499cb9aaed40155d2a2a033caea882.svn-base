<?php
// +----------------------------------------------------------------------
// | Copyright (c) 2013 http://www.onethink.cn All rights reserved.
// +----------------------------------------------------------------------
// | Author: kerry.gao <1509699669@vip.qq.com> <http://weibo.com/coderzero>
// +----------------------------------------------------------------------
namespace Admin\Controller;
use Think\Controller;
use Think\Upload\Driver\Qiniu\QiniuStorage;

class GoodsController extends BaseController {
    public function index(){
    	$destination = M('destination');
    	$destinations = $destination->select();
    	$pagesize = C('BACKEND_PAGESIZE');
    	$package = M('package');
    	$where = array();
    	$packageData = $package->where($where)->select();
    	$this->assign('packageData',$packageData);
    	$this->assign('destinations',$destinations);
        $this->display();
    }

    public function addGoods(){
    	$category = D('ProductCategory');
    	$destination = M('destination');
    	$destinations = $destination->select();
    	$categorys = $category->where(array('parent_id'=>0))->select();
        $promotion = M('promotion');
        $promotionData = $promotion->select();
    	$this->assign('categorys',$categorys);
        $this->assign('promotionData', $promotionData);
    	$this->assign('destinations',$destinations);
    	$this->display();
    }

    public function addGoodsMethod(){
        $arr = I();
        $package = M('package');
        $noProvide = M('PackageNoProvideDate');
        $datePrice = M('PackageDatePrice');
        $promotionDate = M('PackagePromotionDate');
        $addValueService = M('PackageAddValueService');
        $packageId = $package->data(array(
            'product_id' => $arr['product_id'],
            'package_no' => $arr['package_no'],
            'name' => $arr['name'],
            'name_en' => $arr['name_en'],
            'price' => $arr['price'],
            'number_range_min' => $arr['number_range_min'],
            'number_range_max' => $arr['number_range_max'],
            'out_charge' => $arr['out_charge'],
            'content' => $arr['content'],
            'content_en' => $arr['content_en'],
            'gift_service' => $arr['gift_service'],
            'gift_service_en' => $arr['gift_service_en'],
            'area_id' =>$arr['area_id']
        ))->add();
            
        foreach ($arr['no_provide_date_startdate'] as $k => $v) {
            if(!empty($v) && !empty($arr['no_provide_date_enddate'][$k])){
                $noProvide->data(array(
                    'package_id' => $packageId,
                    'startdate' => $v,
                    'enddate' => $arr['no_provide_date_enddate'][$k]
                ))->add();
            }
        }
        
        foreach ($arr['package_date_price_startdate'] as $j => $l) {
            if(!empty($l) && !empty($arr['package_date_price_enddate'][$j]) && !empty($arr['package_date_price'][$j])){
                $datePrice->data(array(
                    'package_id' => $packageId,
                    'startdate' => $l,
                    'enddate' => $arr['package_date_price_enddate'][$j],
                    'price' => $arr['package_date_price'][$j]
                ))->add();
            }
        }
        
        foreach ($arr['package_promotion_startdate'] as $a => $s) {
            if(!empty($s) && !empty($arr['package_promotion_enddate'][$a]) && !empty($arr['promotion'][$a])){                
                $promotionDate->data(array(
                    'package_id' => $packageId,
                    'startdate' => $s,
                    'enddate' => $arr['package_promotion_enddate'][$a],
                    'promotion_id' => $arr['promotion'][$a]
                ))->add();
            }
        }
        
        foreach ($arr['add_value_name'] as $d => $f) {
            if(!empty($f) && !empty($arr['add_value_name_en'][$d]) && !empty($arr['add_value_price'][$d])){
                $addValueService->data(array(
                    'package_id' => $packageId,
                    'name' => $f,
                    'name_en' => $arr['add_value_name_en'][$d],
                    'price' => $arr['add_value_price'][$d],
                    'min_num' => $arr['min_num'][$d],
                    'max_num' => $arr['max_num'][$d]
                ))->add();
            }
        }

        $this->success("添加商品成功", U("Goods/index"));

    }

    public function getVendors(){
    	$arr = I();
        $dao = M();
        $data = array();
        if($arr['id']){
            $data = $dao->query("SELECT id,name from vendors where id in (SELECT vendors_id from vendors_category_relation where category_id = '%s')",$arr['id']);
        }
        $this->resultMsg('success', '获取成功',$data);
    }

    public function getServices(){
    	$arr = I();
    	$vid = $arr['id'];
    	$product = M('product');
    	$services = $product->field('id,name')->where(array('vendors_id'=>$vid))->select();
    	$this->resultMsg('success', '获取成功',$services);
    }
}
