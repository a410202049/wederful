/**
 * Pj 后台管理projet
 * fj in 2015-11-02
 */

;
! function($) {
    "use strict";
    var Pj = (function() {
        /**
         * 页面全局节点
         */
        var $allWrap = $('#allWrap'),
            $mask = $('#mask'),

            _del_temp_dom = '<button type="button" class="del-temp-dom i-button i-b-w ml10 mr10">删除</button>',

            /**
             * 分页
             */
            _page = '1', //当前分页 (所有页面公用)
            _search = global.keywords, // 当前搜索关键字 （所有页面公用）
            _city = global.countryid, // 当前城市 （商品列表页面使用）
            _dis = global.destinationid, // 当前目的地 （商品列表页面使用）
            _article_type = global.categoryid, // 当前文章类型 （文章管理列表页面使用）
            _good_release_f = true,

            /**
             * 商家添加 变量
             */
            _merchantSaving = true,
            // 地区
            _areaSelecting = true,

            /**
             * 选择分类
             */
            _choiceCategorying = true,

            /**
             * 品类管理 变量
             */
            $attrIconDom = $('#attrDom').html(),
            _add_category = '<div class="m-add-category m-add-box dlb r4 bcf">' +
            '<label class="db mb10">' +
            '<span>品类名称</span>' +
            '<input name="name" class="save-item i-input" type="text" />' +
            '</label>' +
            '<label class="db mb10">' +
            '<span>&emsp;</span>' +
            '<span class="i-error">&emsp;</span>' +
            '</label>' +
            '<div class="db mb10">' +
            '<span>&emsp;</span>' +
            '<div class="dlb">' +
            // 添加子类 class 为 save-category-sub
            '<button class="save-category i-button i-b-mw mr20" type="bubtton">保存</button>' +
            '<button class="close-mask i-button i-b-mw" type="bubtton">关闭</button>' +
            '</div>' +
            '</div>' +
            '</div>',
            _categorySaving = true,
            _add_category_id,

            /**
             * 取消费用
             */
            _addCancelFee = '<div class="mb10">在婚礼日期前<input name="deduct_fine_date[]" class="i-input i-max-width ml10 mr10" type="text" />天取消，扣除定金比例<input name="deduct_fine_value[]" class="i-input i-max-width ml10 mr10" type="text" />% ' +
            _del_temp_dom +
            '</div>',

            /**
             * 属性管理
             */
            // 属性添加模板
            _attr_add = '<div class="m-add-attribute m-add-box dlb r4 bcf">' +
            '<label class="db mb10">' +
            '<span>属性类型</span>' +
            '<select class="attribute-type i-select">' +
            '<option value="input">文本框</option>' +
            '<option value="textarea">文本域</option>' +
            '<option value="select">下拉框</option>' +
            '<option value="radio">单选框</option>' +
            '<option value="checkbox">多选框</option>' +
            '</select>' +
            '</label>' +
            '<div class="attribute-type-wrap c">' +
            '<label class="db fl">' +
            '<span>属性名</span>' +
            '<input type="text" class="attribute-name i-input" />' + $attrIconDom +
            '</label>' +
            '</div>' +
            '<label class="db mb10">' +
            '<span>&emsp;</span>' +
            '<span class="i-error">&emsp;</span>' +
            '</label>' +
            '<div class="db mb10">' +
            '<span>&emsp;</span>' +
            '<div class="dlb">' +
            '<button class="save-attribute i-button i-b-mw mr20" type="bubtton">保存</button>' +
            '<button class="close-mask i-button i-b-mw" type="bubtton">关闭</button>' +
            '</div>' +
            '</div>' +
            '</div>',
            // 多值属性模板
            _attr_val_multi = '<label class="db mr20 fl">' +
            '<span>属性名</span>' +
            '<input type="text" class="attribute-name i-input i-text-s" />' +
            '</label>' +
            '<section class="attr-val-wrap bcf pr pl20 fr">' +
            '<div class="dlb">' +
            '<label class="db mb10"><span>候选值</span><input type="text" class="save-item i-input i-text-s" />' + $attrIconDom +
            _del_temp_dom +
            '</label>' +
            '</div>' +
            '<button type="button" class="attr-val-add ml10 i-button i-b-mw">新增值</button>' +
            '</section>',
            // 多值属性 - 值
            _attr_val_add = '<label class="db mb10"><span>候选值</span><input type="text" class="save-item i-input i-text-s" />' + $attrIconDom +
            _del_temp_dom +
            '</label>',
            // 文本属性 模板
            _attr_val_single = '<label class="db fl">' +
            '<span>属性名</span>' +
            '<input type="text" class="attribute-name i-input" />' + $attrIconDom +
            '</label>',
            _add_attr_id,
            _addAttring = true,
            _editAttring = true,
            // 品类 属性 删除
            _delCategory = true,
            _del_temp_dom = true,
            /**
             * 文章管理
             */
            _art_operation = true,
            /**
             * 地区管理
             */
            $areaAddDom = $('#areaAddDom').html(),
            _area_operation = true,
            /**
             * 服务商管理
             */
            $providerAddDom = $('#providerAddDom').html();
        return {
            /**
             * public
             */
            ini: function() {
                // 分页初始化
                _city && ( // 商品列表页如果有选择城市 处触改变
                    $allWrap.find('.area-search-a').find('option[value="' + _city + '"]').attr('selected', 'selected')
                );
                _dis && ( // 商品列表页如果有选择目的地 处触改变
                    $allWrap.find('.area-search-b').find('option[value="' + _dis + '"]').attr('selected', 'selected')
                );
                _search && ( // 页面如果有搜索关键字 处触改变
                    $allWrap.find('.search-list').val(_search)
                );
                _article_type && ( // 页面如果有当前文章类型 处触改变
                    $allWrap.find('.art-type').find('option[value="' + _article_type + '"]').attr('selected', 'selected')
                );

                // 新增套餐
                var $package_tpl;
                if ($allWrap.find('.package-each').length > 0) {
                    $package_tpl = $allWrap.find('.package-tpl');
                    global['packageDom'] = $package_tpl.find('.packageDom').clone();
                    global['unDayDom'] = $package_tpl.find('.unDayDom').clone();
                    global['dayPriceDom'] = $package_tpl.find('.dayPriceDom').clone();
                    global['goodsPromotDom'] = $package_tpl.find('.goodsPromotDom').clone();
                    global['exPriceDom'] = $package_tpl.find('.exPriceDom').clone();

                    global['add_dom_num'] = $allWrap.find('.package-form').find('.package-each').length;
                };

                // 商家添加和查看
                if ($allWrap.find('.add-merchant-tpl').length > 0) {
                    global['addMerchant'] = $allWrap.find('.m-add-merchant').clone();
                };

                // 七牛文件上传
                Pj.qiNiu();

                // 富文本编辑
                Pj.inputText();

                // 日期选择框初始化(添加套餐第三步骤)
                Pj.inputDate($('.package-form'));
            },
            /**
             * 商品列表分页
             */
            goodsPagingJudge: function($this) {
                Pj.goodsPagingGo(
                    $this.data('role') === 'p-dir' ? $this.data('p') : $this.val(),
                    _city,
                    _dis,
                    _search
                );
            },
            goodsPagingGo: function(page, city, dis, search) {
                var _u = '';
                _u += (page   ? '/p/'             + page   : '') +
                      (city   ? '/countryid/'     + city   : '') +
                      (dis    ? '/destinationid/' + dis    : '') +
                      (search ? '/search/'        + search : '');
                // 设置新的搜索数据
                _page = page;
                _city = city;
                _dis = dis;
                _search = search;
                location.href = global.localUrl + _u;
            },
            goodsSearch: function(_s) {
                _search = _s;
                Pj.goodsPagingGo('1', _city, _dis, _search);
            },
            // 发布-删除 商品
            goodsOperation: function($this, _type) {
                if (_good_release_f) {
                    _good_release_f = false;
                    $.remaind('操作中，请稍后...', false);
                    $.ajax({
                        url: _type === 'release' ? global.isShowUrl : global.delProductUrl,
                        dataType: 'json',
                        data: {
                            pid: $this.data('id')
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                $.showMask(false);

                                _type === 'release' && (
                                    $this.html(r.data === '1' ? '取消发布' : '发布')
                                ) || (
                                    $this.closest('tr').slideUp(400, function() {
                                        $(this).remove();
                                    })
                                );
                            } else {
                                $.remaind(r.message, true);
                            };
                            _good_release_f = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _good_release_f = true;
                        }
                    });
                };
            },
            // 商品删除
            goodsDel: function($this) {
                confirm('确认删除商品: ' + $this.closest('tr').find('.goods-name').html()) && (
                    Pj.goodsOperation($this, 'del')
                );
            },
            // checkGoodsEnpty
            checkGoodsEnpty: function($this) {
                var $dom = $this.closest('form').find('*[data-need="true"]'),
                    _l = $dom.length,
                    _v;
                while (_l--) {
                    _v = $.trim($dom.eq(_l).val());
                    if (_v === '' || _v === 'null') {
                        $.remaind($dom.eq(_l).data('name') + ' 不能为空', true);
                        break;
                    };
                };
                _l < 0 && (
                    // 不用出发 click 自动提交
                    $this.removeAttr('type')
                );
            },
            /**
             * 地区事件
             */
            selectArea: function($this, _next) {
                var _id = $this.val(), // 一级地区的id
                    _t = '<option value="null">选择地区</option>',
                    _sub_area = _next ? $this.next() : $this.closest('tr').find('.select-area-b');

                if (_id !== 'null') {
                    if (_next) {
                        Pj.goodsPagingGo('1', _id, '', _search);
                    } else if (_areaSelecting) {
                        _areaSelecting = false;
                        $.ajax({
                            url: global.cityListUrl + '/' + _id,
                            dataType: 'json',
                            success: function(r) {
                                if (r.status === 'success') {
                                    if (r.data.length) {
                                        $.each(r.data, function(n, v) {
                                            _t += '<option value="' + v.id + '">' + v.name + '</option>';
                                        });
                                        _sub_area.html(_t).removeClass('none');
                                    } else {
                                        _sub_area.addClass('none').html(_t);
                                    }
                                } else {
                                    $.remaind(r.message, true);
                                };
                                // 复原 select 当前城市
                                $this.find('option[value="' + _id + '"]').attr('selected', 'selected');
                                _areaSelecting = true;
                            },
                            error: function() {
                                $.remaind('网络堵塞', true);
                                _areaSelecting = true;
                            }
                        });
                    };
                } else {
                    // 不搜索任何城市
                    _next && (
                        Pj.goodsPagingGo('1', '', '', _search)
                    );
                };
            },

            selectAreaSub: function($this) {
                var _v = $this.val();
                Pj.goodsPagingGo(
                    '1',
                    _city,
                    _v === 'null' ? '' : _v,
                    _search
                );
            },

            /**
             * 商家添加
             */
            addMerchant: function(_type) {
                $mask.html(
                    $('<div>').append(global['addMerchant']).html()
                ).fadeIn(400, function() {
                    // 触发七牛
                    Pj.qiNiu();
                });

                if (_type === 'check') {
                    var _id = $allWrap.find('.select-merchant').val();
                    if (_id !== 'null') {
                        var $merchant = $mask.find('.m-add-merchant'),
                            $save_item = $merchant.find('.save-item'),
                            $err = $merchant.find('.i-error');

                        // 保存按钮去掉class save-merchant 变为 edit-merchant
                        $merchant.find('.save-merchant').removeClass('save-merchant').addClass('edit-merchant');

                        Pj.tip({
                            d: $err,
                            t: '正在加载数据...',
                            s: false
                        });
                        // 获取id 请求值 填进dom
                        $.ajax({
                            type: 'POST',
                            // ### 查看商家 获取数据的地址
                            url: global.getVendorDetailUrl,
                            data: {
                                id: _id
                            },
                            dataType: 'json',
                            success: function(r) {
                                if (r.status === 'success') {
                                    // 填进dom
                                    $.each(r.data, function(n, v) {
                                        $save_item.filter('[name="' + n + '"]').val(v);
                                    });
                                    if (r.data.icon === null) {
                                        $mask.find('.merchant-logo').parent().remove();
                                    } else {
                                        $mask.find('.merchant-logo').attr('src', r.data.icon).parent().removeClass('none').next().next().andSelf().hide();
                                    };
                                    Pj.tip({
                                        d: $err,
                                        t: '&emsp;',
                                        s: false
                                    });
                                } else {
                                    Pj.tip({
                                        d: $err,
                                        t: r.message,
                                        s: true
                                    });
                                };
                            },
                            error: function() {
                                Pj.tip({
                                    d: $err,
                                    t: '网络堵塞',
                                    s: true
                                });
                            }
                        });
                    } else {
                        $.remaind('请选择商家', true);
                    };
                } else {
                    // 添加商家
                    $mask.find('.merchant-logo').parent().remove();
                };
            },
            // 保存商家添加
            saveMerchant: function($this, _type) {
                if (_merchantSaving) {
                    _merchantSaving = false;
                    // 获取数据
                    var $p_dom = $this.closest('.m-add-merchant'),
                        $save_item = $p_dom.find('.save-item'),
                        $err = $p_dom.find('.i-error'),
                        _length = $save_item.length,
                        _data = {};
                    while (_length--) {
                        _data[$save_item[_length].name] = $save_item.eq(_length).val();
                    };

                    _type && (_data.id = $allWrap.find('.select-merchant').val());

                    // 提示信息
                    Pj.tip({
                        d: $err,
                        t: _type ? '正在保存...' : '正在添加...',
                        s: false
                    });
                    $.ajax({
                        type: 'POST',
                        url: global.addVendorsUrl,
                        data: _data,
                        dataType: 'json',
                        success: function(r) {
                            if (r.status === 'success') {
                                if (_type) {
                                    // 修改商家 页面修改节点
                                    $allWrap.find('.select-merchant').find('option[value="' + r.data.id + '"]').val(r.data.id).html(r.data.name);
                                } else {
                                    // 添加商家 页面插入节点
                                    $allWrap.find('.select-merchant').append('<option value="' + r.data.id + '">' + r.data.name + '</option>');
                                };
                                // 提示成功
                                Pj.tip({
                                    d: $err,
                                    t: _type ? '保存成功' : '添加成功',
                                    s: false
                                });
                                setTimeout(function() {
                                    $.showMask(false);
                                }, 600);
                            } else {
                                Pj.tip({
                                    d: $err,
                                    t: r.message,
                                    s: true
                                });
                            };
                            _merchantSaving = true;
                        },
                        error: function() {
                            Pj.tip({
                                d: $err,
                                t: '网络堵塞',
                                s: true
                            });
                            _merchantSaving = true;
                        }
                    });
                };
            },
            // 商家图片删除
            goodsImgDel: function($this) {
                var $p = $this.parent(), // figure
                    $add = $p.parent().find('.add-img');
                $p.hide(400, function() {
                    $p.remove();
                    $add.data('num') !== 'infinity' && (
                        // 大图 缩略图
                        $add.show(400)
                    );
                });
            },

            /**
             * 分类选择
             */
            choiceCategory: function($this) {
                var _id = $this.val(), // 一级品类的id
                    _t = '<option value="null">选择地区</option>',
                    $subCategory = $this.closest('tr').find('.choice-category-b');
                if (_choiceCategorying) {
                    _choiceCategorying = false;
                    $.ajax({
                        type: 'POST',
                        url: global.getChildrenCategoryUrl,
                        data: {
                            id: _id
                        },
                        dataType: 'json',
                        success: function(r) {
                            if (r.status === 'success') {
                                // 展示二级品类
                                $.each(r.data, function(n, v) {
                                    _t += '<option value="' + v.id + '">' + v.name + '</option>';
                                });
                                $subCategory.html(_t).removeClass('none');
                            } else {
                                $.remaind(r.message, true);
                            };
                            _choiceCategorying = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _choiceCategorying = true;
                        }
                    });
                };
            },
            choiceCategorySub: function($this) {
                var _id = $this.val(), // 二级品类的id
                    _t = '',
                    $categoryWrap = $allWrap.find('.category-wrap'),
                    _v,
                    _l;
                if (_choiceCategorying) {
                    if (_id !== 'null') {
                        _choiceCategorying = false;
                        $.ajax({
                            type: 'POST',
                            url: global.getCategoryAttrUrl,
                            data: {
                                id: _id
                            },
                            dataType: 'json',
                            success: function(r) {
                                if (r.status === 'success') {
                                    // 展示二级品类下面的属性
                                    $.each(r.data, function(n, v) {
                                        switch (v.type) {
                                            case 'input':
                                                _t += '<div class="mb10">' +
                                                    '<span class="vat">' + v.name + '：</span>' +
                                                    '<input name="attr[' + v.id + ']" class="i-input i-w-short" type="text" />' +
                                                    '</div>';
                                                break;
                                            case 'textarea':
                                                _t += '<div class="mb10">' +
                                                    '<span class="vat">' + v.name + '：</span>' +
                                                    '<textarea name="attr[' + v.id + ']" class="i-textarea i-w-short bb"></textarea>' +
                                                    '</div>';
                                                break;
                                            case 'select':
                                                _v = v.options;
                                                _l = _v.length;

                                                _t += '<div class="mb10">' +
                                                    '<span class="vat">' + v.name + '：</span>' +
                                                    '<select name="attr[' + v.id + ']" class="i-select i-w-short">';

                                                while (_l--) {
                                                    _t += '<option value="' + _v[_l].id + '">' + _v[_l].option + '</option>';
                                                };

                                                _t += '</select>' +
                                                    '</div>';
                                                break;
                                            case 'radio':
                                                _v = v.options;
                                                _l = _v.length;

                                                _t += '<div class="mb10 c">' +
                                                    '<span class="vat fl">' + v.name + '：</span><div style="width: 80%; float: left">';

                                                while (_l--) {
                                                    _t += '<label class="dlb mr20"><input name="attr[' + v.id + ']" class="mr5" type="radio" value="' + _v[_l].id + '" />' + _v[_l].option + '</label>';
                                                };

                                                _t += '</div></div>';
                                                break;
                                            case 'checkbox':
                                                _v = v.options;
                                                _l = _v.length;

                                                _t += '<div class="mb10 c">' +
                                                    '<span class="vat">' + v.name + '：</span>';

                                                while (_l--) {
                                                    _t += '<label class="dlb mr20"><input name="attr[' + v.id + '][]" class="mr5" type="checkbox" value="' + _v[_l].id + '" />' + _v[_l].option + '</label>';
                                                };

                                                _t += '</div>';
                                                break;
                                        };
                                    });
                                    $categoryWrap.html(_t === '' ? '此商品分类下面没有属性' : _t);
                                } else {
                                    $.remaind(r.message, true);
                                };
                                _choiceCategorying = true;
                            },
                            error: function() {
                                $.remaind('网络堵塞', true);
                                _choiceCategorying = true;
                            }
                        });
                    } else {
                        $categoryWrap.html('请选择商品分类');
                    };
                };
            },

            /**
             * 品类管理
             */
            // 弹出添加(子类)品类 框
            addCategory: function($this) {
                $mask.html(_add_category).fadeIn(400);
                $this && (
                    // 保存按钮去掉class save-category 变为 save-category-sub
                    $mask.find('.m-add-category').find('.save-category').removeClass('save-category').addClass('save-category-sub'),
                    // 设置当前要增加二级品类的id
                    _add_category_id = $this.closest('li').data('id')
                );
            },
            // 保存增加(子类)品类
            saveCategory: function($this, _type) {
                // 获取值
                // ajax
                // 成功
                // 提示 然后 600ms later 刷新当前页
                // 失败
                // 提示
                if (_categorySaving) {
                    _categorySaving = false;
                    // 获取数据
                    var $p_dom = $this.closest('.m-add-category'),
                        $save_item = $p_dom.find('.save-item'),
                        $err = $p_dom.find('.i-error'),
                        _length = $save_item.length,
                        _data = {};
                    while (_length--) {
                        _data[$save_item[_length].name] = $save_item.eq(_length).val();
                    };

                    _type && (_data.parentId = _add_category_id);

                    // 提示信息
                    Pj.tip({
                        d: $err,
                        t: '正在保存...',
                        s: false
                    });
                    $.ajax({
                        type: 'POST',
                        url: global.categoryMdUrl,
                        data: _data,
                        dataType: 'json',
                        success: function(r) {
                            if (r.status === 'success') {
                                // 提示成功
                                Pj.tip({
                                    d: $err,
                                    t: '保存成功',
                                    s: false
                                });
                                setTimeout(function() {
                                    location.reload();
                                }, 600);
                            } else {
                                Pj.tip({
                                    d: $err,
                                    t: r.message,
                                    s: true
                                });
                            };
                            _categorySaving = true;
                        },
                        error: function() {
                            Pj.tip({
                                d: $err,
                                t: '网络堵塞',
                                s: true
                            });
                            _categorySaving = true;
                        }
                    });
                };
            },

            /**
             * 属性管理
             */
            // 弹出增加属性框
            addAttribute: function($this) {
                _add_attr_id = $this.closest('li').data('id');
                $mask.html(_attr_add).fadeIn(400);
            },
            // 改变属性类型 （input select checkbox radio）
            changeAttr: function($this) {
                var _val = $this.val();
                $('#mask').find('.attribute-type-wrap').html(
                    (_val === 'input' || _val === 'textarea') ? _attr_val_single : _attr_val_multi
                );
            },
            // 增加候选属性 - 值
            attrValAdd: function($this) {
                $this.prev().append(_attr_val_add);
            },
            // 保存新增属性 (保存编辑属性)
            saveAttr: function($this) {
                // 获取数据
                var $p_dom = $mask.find('.m-add-attribute'),
                    $err = $p_dom.find('.i-error'),
                    _d = {};
                if (_addAttring) {
                    _addAttring = false;
                    // 拼接数据
                    $this.data('type') === 'edit' ? _d.attr_id = _add_attr_id : _d.id = _add_attr_id;
                    _d.type = $p_dom.find('.attribute-type').val();
                    _d.name = $.trim($p_dom.find('.attribute-name').val());

                    // 多值的情况
                    var _v = [],
                        $v = $p_dom.find('.save-item'),
                        _l = $v.length;
                    if (_l > 0) {
                        while (_l--) {
                            _v.push({
                                'id': $v.eq(_l).data('id'),
                                'value': $.trim($v.eq(_l).val()),
                                'pic': $v.eq(_l).parent().find('.icon_id').attr('data-pic')
                            });
                        };
                        _d.option = _v;
                    };

                    // 单值情况（文版框 文本域）
                    _d.pic = $p_dom.find('.attribute-name').parent().find('.icon_id').attr('data-pic');

                    Pj.tip({
                        d: $err,
                        t: '保存中...',
                        s: false
                    });
                    $.ajax({
                        type: 'POST',
                        url: $this.data('type') === 'edit' ? global.editAttributeUrl : global.addAttributeUrl,
                        data: _d,
                        dataType: 'json',
                        success: function(r) {
                            if (r.status === 'success') {
                                // 提示成功
                                Pj.tip({
                                    d: $err,
                                    t: '保存成功',
                                    s: false
                                });
                                setTimeout(function() {
                                    location.reload();
                                }, 600);
                            } else {
                                Pj.tip({
                                    d: $err,
                                    t: r.message,
                                    s: true
                                });
                            };
                            _addAttring = true;
                        },
                        error: function() {
                            Pj.tip({
                                d: $err,
                                t: '网络堵塞',
                                s: true
                            });
                            _addAttring = true;
                        }
                    });
                };
            },
            // 选择属性图标
            choiceIcon: function($this) {
                $this.parent().prev().attr({
                    'data-pic': $this.data('id') + '',
                    'src': $this.find('img').attr('src')
                });
            },

            /**
             * 费用说明
             */
            addCancelFee: function() {
                $allWrap.find('.cancel-fee-wrap').append(_addCancelFee);
            },

            /**
             * 新增套餐
             */
            addDom: function($this) {
                var _id = $this.data('html'),
                    $wrap,
                    re = new RegExp('\\[1\\]', "g"),
                    re2 = new RegExp('\\[\\d\\]'),
                    _now_num,
                    _temp;
                _id === 'packageDom' && (
                    $wrap = $this.parent().prev(),
                    $wrap.children().addClass('active'),

                    $wrap.append(
                        $('<div>').append(global[_id]).html().replace(re, '[' + (++global.add_dom_num) + ']')
                    )
                ) || (
                    $wrap = $this.prev(),
                    // 在插入节点之前 把节点的顺序变成当前套餐顺序
                    _now_num = $wrap.html(),
                    _now_num = _now_num.match(re2),

                    $wrap.append(
                        $('<div>').append(global[_id]).html().replace(re, _now_num)
                    )
                );

                // 富文本编辑
                Pj.inputText();

                // 初始化日期
                Pj.inputDate($('.package-form'));
            },
            packageToggle: function($this) {
                $this.closest('.package-each').siblings().addClass('active').end().toggleClass('active');
            },
            packageDel: function($this) {
                if (confirm('确认要取消建立这个套餐')) {
                    var _d = $this.closest('.package-each');
                    _d.slideUp(400, function() {
                        _d.remove();
                    });
                };
            },

            /**
             * 删除品类属性
             */
            delCategory: function($this, _attr) {
                var _id = $this.closest('li').data('id');
                if (_delCategory && confirm('确认要删除\n' + $this.data('i'))) {
                    _delCategory = false;
                    $.ajax({
                        type: 'POST',
                        url: _attr ? global.delAttributeUrl : global.delCategoryUrl,
                        dataType: 'json',
                        data: {
                            id: _id
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                $.remaind('删除成功', false);
                                setTimeout(function() {
                                    location.reload();
                                }, 600);
                            } else {
                                $.remaind(r.message, true);
                            };
                            _delCategory = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _delCategory = true;
                        }
                    });
                };
            },
            editCategory: function($this) {
                if (_editAttring) {
                    _editAttring = false;
                    // 用于请求数据的属性id
                    _add_attr_id = $this.closest('li').data('id');
                    $.remaind('数据请求中...', false);
                    $.ajax({
                        url: global.getAttributeUrl,
                        dataType: 'json',
                        data: {
                            attr_id: _add_attr_id
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                //属性框弹出
                                $mask.html(_attr_add);
                                var $wrap = $mask.find('.m-add-attribute');
                                // 保存按钮 改为保存属性编辑
                                $wrap.find('.save-attribute').data('type', 'edit');

                                // 改变类型
                                $wrap.find('.attribute-type').val(r.data.type).trigger('change');

                                if (r.data.type === 'input' || r.data.type === 'textarea') {
                                    // 单值得情况
                                    $wrap.find('.attribute-name').val(r.data.name).next().find('li[data-id="' + r.data.icon_id + '"]').trigger('click');
                                } else {
                                    // 多值情况
                                    $wrap.find('.attribute-name').val(r.data.name);
                                    // 遍历每一个候选值
                                    var _opt_l = r.data.options.length - 1,
                                        $attrAdd = $wrap.find('.attr-val-add'),
                                        $now = $wrap.find('.attr-val-wrap').find('label');
                                    // 第一个列外 ^_^
                                    $now.find('.save-item').data('id', r.data.options[_opt_l].id)
                                        .val(r.data.options[_opt_l].option)
                                        .next().find('li[data-id="' + r.data.options[_opt_l].icon_id + '"]').trigger('click');

                                    while (_opt_l--) {
                                        $attrAdd.trigger('click');
                                        $now = $now.next();
                                        $now.find('.save-item').data('id', r.data.options[_opt_l].id)
                                            .val(r.data.options[_opt_l].option)
                                            .next().find('li[data-id="' + r.data.options[_opt_l].icon_id + '"]').trigger('click');
                                    };

                                    // 给所有删除按钮添加属性 data-role="edit"
                                    $wrap.find('.del-temp-dom').data('role', 'edit');
                                };
                            } else {
                                $.remaind(r.message, true);
                            };
                            _editAttring = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _editAttring = true;
                        }
                    });
                };
            },
            delTempDom: function($this) {
                if ($this.data('role') === 'edit') {
                    if (_del_temp_dom) {
                        _del_temp_dom = false;
                        $this.html('删除中...');
                        $.ajax({
                            url: global.delOptionUrl,
                            dataType: 'json',
                            data: {
                                id: $this.closest('label').find('.save-item').data('id')
                            },
                            success: function(r) {
                                if (r.status === 'success') {
                                    $this.parent().remove();
                                } else {
                                    $.remaind(r.message, true);
                                };
                                _del_temp_dom = true;
                            },
                            error: function() {
                                $.remaind('网络堵塞', true);
                                _del_temp_dom = true;
                            }
                        });
                    };
                } else {
                    $this.parent().remove();
                };
            },

            /**
             * [tip 所有错误提示]
             * @param  o   [参数对象]
             * @param  o.d [错误节点]
             * @param  o.t [错误内容]
             * @param  o.s [错误状态 true-> 红色, false-> 正常色]
             */
            tip: function(o) {
                o.d.css('color', o.s ? '#f00' : '#bdb099').html(o.t);
            },

            /**
             * 文章管理
             */
            // 文章删除
            artDel: function($this) {
                var $tr = $this.closest('tr');
                if (_art_operation && confirm('确认删除文章？\n' + $tr.data('name'))) {
                    _art_operation = false;
                    $.ajax({
                        url: global.delArticleUrl,
                        dataType: 'json',
                        data: {
                            aid: $tr.data('id')
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                $tr.remove();
                            } else {
                                $.remaind(r.message, true);
                            };
                            _art_operation = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _art_operation = true;
                        }
                    });
                };
            },
            // 文章操作（发布和置顶）
            artOperation: function($this, _type) {
                var $tr = $this.closest('tr'),
                    _t;
                if (_art_operation) {
                    _art_operation = false;
                    $.remaind('操作中，请稍后...', false);
                    $.ajax({
                        url: _type === 'show' ? global.articleIsShowUrl : global.articleIsTopUrl,
                        dataType: 'json',
                        data: {
                            aid: $tr.data('id')
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                $.showMask(false);
                                _t = _type === 'show' ? '发布' : '置顶';
                                $this.html(r.data === '1' ? '取消' + _t : _t);
                            } else {
                                $.remaind(r.message, true);
                            };
                            _art_operation = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _art_operation = true;
                        }
                    });
                };
            },
            // 文章分页
            artPagingJudge: function($this) {
                Pj.artPagingGo(
                    $this.data('role') === 'p-dir' ? $this.data('p') : $this.val(),
                    _article_type,
                    _search
                );
            },
            artPagingGo: function(page, type, search) {
                var _u = '';
                _u += (page   ? '/p/'          + page   : '') +
                      (type   ? '/categoryid/' + type   : '') +
                      (search ? '/search/'     + search : '');
                // 设置新的搜索数据
                // search/global.keywords
                // categoryid/global.categoryid
                _page = page;
                _article_type = type;
                location.href = global.localUrl + _u;
            },
            artSearch: function(_s) {
                _search = _s;
                Pj.artPagingGo('1', _article_type, _search);
            },
            /**
             * 地区管理
             */
            areaAddDom: function($this) {
                $this.prev().append(
                    $areaAddDom.replace('{{content}}', $this.data('con'))
                               .replace('{{icon}}', $this.data('icon'))
                               .replace('{{edit-dom}}', 'edit-dom')
                );
                // 富文本编辑
                Pj.inputText();
            },
            aeraSelectIcon: function($this) {
                $this.parent().prev().attr('src', $this.find('img').attr('src')).prev().val($this.data('id'));
            },
            areaOperation: function($this, _type) {
                if (_area_operation) {
                    _area_operation = false;
                    $.remaind('操作中，请稍后...', false);
                    $.ajax({
                        url: _type === 'del' ? global.delAreaUrl : global.copyAreaUrl,
                        dataType: 'json',
                        data: {
                            id: $this.data('id')
                        },
                        success: function(r) {
                            if (r.status === 'success') {
                                $.showMask(false);
                                if (_type === 'del') {
                                    $this.remove();
                                } else {
                                    $this.parent().append($this.clone().find('.createtime').html(r.data.createtime).end().find('.upname').html(r.data.upname).end().attr('data-id', r.data.id));
                                };
                            } else {
                                $.remaind(r.message, true);
                            };
                            _area_operation = true;
                        },
                        error: function() {
                            $.remaind('网络堵塞', true);
                            _area_operation = true;
                        }
                    });
                };
            },
            areaDel: function($this) {
                confirm('确认删除地区: ' + $this.closest('tr').data('name')) && (
                    Pj.areaOperation($this.closest('tr'), 'del')
                );
            },
            areaCopy: function($this) {
                confirm('确认复制地区: ' + $this.closest('tr').data('name')) && (
                    Pj.areaOperation($this.closest('tr'), 'copy')
                );
            },
            /**
             * 服务商管理
             */
            providerAddDom: function($this) {
                $this.prev().append($providerAddDom);
            },

            /**
             * other
             */
            // 日期选择框初始化
            inputDate: function($wrap) {
                var $input_date = $wrap.find('.input-date'),
                    _input_date_l = $input_date.length;
                if (_input_date_l > 0) {
                    while (_input_date_l--) {
                        $input_date.eq(_input_date_l).glDatePicker({
                            calendarOffset: {
                                x: 0,
                                y: -1
                            },
                            zIndex: 1
                        });
                    };
                };
            },

            // 富文本编辑
            inputText: function() {
                var _edit = [],
                    $edit = $('.edit-dom'),
                    _edit_l = $edit.length,
                    _toolbar = [
                        'image',
                        'link',
                        'bold',
                        'title',
                        'italic',
                        'underline',
                        'strikethrough',
                        'color',
                        'ol', // ordered list
                        'ul', // unordered list
                        'blockquote', // 块引用
                        //'code',           // code block
                        'table',
                        // 'hr', // horizontal ruler
                        // 'indent',
                        // 'outdent',
                        'alignment',
                    ];
                if (_edit_l > 0) {
                    while (_edit_l--) {
                        if(!($edit.eq(_edit_l).parent().is('.simditor-wrapper'))) {
                            _edit[_edit_l] = new Simditor({
                                textarea: $edit[_edit_l],
                                toolbar: _toolbar, //工具栏
                                defaultImage: 'http://7xo7hn.com1.z0.glb.clouddn.com/article_uploadI_img.png',
                                upload: {
                                    url: global.uploadUrl, //文件上传的接口地址
                                    // params: null, //键值对,指定文件上传接口的额外参数,上传的时候随文件一起提交
                                    // fileKey: 'fileDataFileName', //服务器端获取文件数据的参数名
                                    connectionCount: 1,
                                    leaveConfirm: '正在上传图片 确认要离开'
                                },
                                toolbarFloat: false // 工具条不固定浏览器头部
                            });
                        };
                    };
                };
            },

            // 七六文件上传
            qiNiu: function() {
                // 七牛
                var $addImg = $('.add-img'),
                    _addImg_l = $addImg.length,
                    // _img_type = ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'ico'],
                    _addImg_option = {
                        runtimes: 'html5,flash,html4',
                        //上传选择的点选按钮 id 字符串
                        browse_button: '',
                        uptoken_url: global.qiniuUploadTokenUrl,
                        domain: '7xo7hn.com1.z0.glb.clouddn.com',
                        max_file_size: '200mb',
                        max_retries: 3,
                        //分块上传时，每片的体积
                        chunk_size: '8mb',
                        //选择文件后自动上传，若关闭需要自己绑定事件触发上传
                        auto_start: true,
                        init: {
                            BeforeUpload: function(up, file) {
                                // 上传前

                                // 后缀名检测
                                // var _name = file.name;
                                // var _suffix= _name.slice(_name.lastIndexOf('.') + 1).toLowerCase();
                                // if (_img_type.indexOf(_suffix) === -1) {
                                //     // $.remaind('只能上传 jpg, jpeg, gif, png, bmp, ico 格式 的图片');
                                //     // 取消上传 待测试
                                // };
                            },
                            FileUploaded: function(up, file, info) {
                                // 获取上传成功后的文件的Url
                                var sourceLink = 'http://' + up.getOption('domain') + '/' + JSON.parse(info).key,
                                    $nowButton = $(up.settings.browse_button[0]),
                                    _input_name = $nowButton.data('name'); // input:hidden 的 name

                                $nowButton.data('num') === 'infinity' && (
                                    _input_name += '[]'
                                );

                                $nowButton.before('<figure class="load-img-wrap">' +
                                    '<img src="' + sourceLink + '" />' +
                                    '<input class="save-item" type="hidden" name="' + _input_name + '" value="' + sourceLink + '" />' +
                                    '<span class="goods-img-del">x</span>' +
                                    '</figure>');

                                // 非无限上传图片 删除上传按钮 和 七牛生成的div
                                $nowButton.data('num') !== 'infinity' && (
                                    $nowButton.next().andSelf().hide(400)
                                );
                            },
                            Error: function(up, err, errTip) {
                                $.remaind(errTip, true);
                            },
                            Key: function(up, file) {
                                // 该配置必须要在 unique_names: false , save_key: false 时才生效
                                return $(up.settings.browse_button[0]).data('rule') === 'random' ? (new Date().getTime() + ~~(Math.random() * 1000)) : (global.projectId + '_' + $(up.settings.browse_button[0]).data('name') + '_' + new Date().getTime());
                            }
                        }
                    },
                    qiNiuObj = [],
                    qiNiuExa = [],
                    _addImg_option_t = [];
                if (_addImg_l > 0) {
                    while (_addImg_l--) {
                        // 给add-img 加上id addImg
                        $addImg.eq(_addImg_l).attr('id', 'addImg' + _addImg_l);

                        // 新的 option
                        _addImg_option_t[_addImg_l] = $.cloneObj(_addImg_option);
                        _addImg_option_t[_addImg_l].browse_button = 'addImg' + _addImg_l;

                        // new 一个新的 七牛对象
                        qiNiuObj[_addImg_l] = new QiniuJsSDK();
                        qiNiuExa[_addImg_l] = qiNiuObj[_addImg_l].uploader(_addImg_option_t[_addImg_l]);
                    };
                };
            }
        };
    })();
    /**
     * 初始化
     */
    Pj.ini();

    /**
     * 商品列表
     */
    // 翻页
    $('#allWrap').on('click', '.con-paging .goods-paging-dir', function() {
        $(this).is('.disable') || Pj.goodsPagingJudge($(this));
    });
    // 到第几页
    $('#allWrap').on('change', '.con-paging .goods-paging-sel', function() {
        Pj.goodsPagingJudge($(this));
    });
    // 一级地区选择 (商品列表页)
    $('#allWrap').on('change', '.area-search-a', function() {
        Pj.selectArea($(this), true);
    });
    // 二级地区选择 （商品列表页）
    $('#allWrap').on('change', '.area-search-b', function() {
        Pj.selectAreaSub($(this));
    });
    // 关键字搜索
    $('#allWrap').on('click', '.goods-search-btn', function() {
        Pj.goodsSearch($.trim($(this).prev().val()));
    });
    $('#allWrap').on('keyup', '.search-list', function(e) {
        e = e || window.e;
        e.keyCode === 13 && $(this).next().trigger('click');
    });
    // 发布商品与取消发布商品
    $('#allWrap').on('click', '.goods-release', function() {
        Pj.goodsOperation($(this), 'release');
    });
    $('#allWrap').on('click', '.goods-del', function() {
        Pj.goodsDel($(this));
    });

    /**
     * 地区
     */
    // 一级地区选择 (新增商品页)
    $('#allWrap').on('change', '.select-area-a', function() {
        Pj.selectArea($(this));
    });

    /**
     * 商家
     */
    // 添加商家
    $('#allWrap').on('click', '.add-merchant', function() {
        Pj.addMerchant();
    });
    // 查看商家详细信息
    $('#allWrap').on('click', '.check-merchant', function() {
        Pj.addMerchant('check');
    });
    // 添加按钮 ->保存商家
    $('#mask').on('click', '.save-merchant', function() {
        Pj.saveMerchant($(this));
    });
    // 查看按钮 ->保存商家
    $('#mask').on('click', '.edit-merchant', function() {
        Pj.saveMerchant($(this), 'edit');
    });
    // 保存商家
    $('#allWrap').on('click', '.goods-add-sub', function() {
        Pj.checkGoodsEnpty($(this));
    });

    /**
     * 分类选择
     */
    // 一级分类选择
    $('#allWrap').on('change', '.choice-category-a', function() {
        // Pj.choiceCategory($(this));
        Pj.choiceCategorySub($(this));
    });
    // *******************************************************
    //////////////////////////
    //由于业务流程需要 现在不需要二级分类选择 功能 //
    //////////////////////////
    // 二级分类选择
    // $('#allWrap').on('change', '.choice-category-b', function() {
    //     Pj.choiceCategorySub($(this));
    // });
    // *******************************************************

    /**
     * 品类
     */
    // 增加品类
    $('#allWrap').on('click', '.add-category', function() {
        Pj.addCategory();
    });
    // 保存添加品类
    $('#mask').on('click', '.save-category', function() {
        Pj.saveCategory($(this));
    });
    // *******************************************************
    //////////////////////////
    //由于业务流程需要 现在不需要添加子类 功能 //
    //////////////////////////
    // 增加子类
    // $('#allWrap').on('click', '.add-category-sub', function() {
    //     Pj.addCategory($(this));
    // });
    // // 保存添加品类 - 子类
    // $('#mask').on('click', '.save-category-sub', function() {
    //     Pj.saveCategory($(this), 'sub');
    // });
    // *******************************************************

    /**
     * 属性添加
     */
    // 弹出属性添加框
    $('#allWrap').on('click', '.add-attribute', function() {
        Pj.addAttribute($(this));
    });
    // 改变属性类型
    $('#mask').on('change', '.attribute-type', function() {
        Pj.changeAttr($(this));
    });
    // 选择属性图标
    $('#mask').on('click', '.atrr_icon', function() {
        Pj.choiceIcon($(this));
    });
    // 新增属性候选值
    $('#mask').on('click', '.attr-val-add', function() {
        Pj.attrValAdd($(this));
    });
    // 保存添加属性
    $('#mask').on('click', '.save-attribute', function() {
        Pj.saveAttr($(this));
    });

    /**
     * 删除品类和属性
     */
    // 删除品类
    $('#allWrap').on('click', '.del-category', function() {
        Pj.delCategory($(this));
    });
    // 删除属性
    $('#allWrap').on('click', '.del-attr', function() {
        Pj.delCategory($(this), 'attr');
    });
    // 编辑属性
    $('#allWrap').on('click', '.edit-attr', function() {
        Pj.editCategory($(this));
    });
    // 删除多余dom节点
    $('#allWrap, #mask').on('click', '.del-temp-dom', function() {
        Pj.delTempDom($(this));
    });

    /**
     * 费用说明
     */
    $('#allWrap').on('click', '.add-cancel-fee', function() {
        Pj.addCancelFee();
    });

    /**
     * 其他
     */
    // 导航栏展开
    $('#mainNav').on('click', '.nav-dir', function() {
        $(this).closest('li').toggleClass('active');
    });
    $('#allWrap').on('click', '.fold-nav-open', function() {
        $(this).closest('li').toggleClass('active');
    });
    // 删除商品图片
    $('#allWrap, #mask').on('click', '.goods-img-del', function() {
        Pj.goodsImgDel($(this));
    });

    /**
     * 增加套餐
     */
    // add dom
    $('#allWrap').on('click', '.add-dom', function() {
        Pj.addDom($(this));
    });
    // 套餐收起与展开
    $('#allWrap').on('click', '.package-toggle', function() {
        Pj.packageToggle($(this));
    });

    $('#allWrap').on('click', '.package-del', function() {
        Pj.packageDel($(this));
    });

    /**
     * 文章管理
     */
    // 文章删除
    $('#allWrap').on('click', '.art-del', function() {
        Pj.artDel($(this));
    });
    // 文章发布
    $('#allWrap').on('click', '.art-publish', function() {
        Pj.artOperation($(this), 'show');
    });
    // 文章顶置
    $('#allWrap').on('click', '.art-top', function() {
        Pj.artOperation($(this), 'top');
    });
    // 翻页
    $('#allWrap').on('click', '.con-paging .art-paging-dir', function() {
        $(this).is('.disable') || Pj.artPagingJudge($(this));
    });
    // 到第几页
    $('#allWrap').on('change', '.con-paging .art-paging-sel', function() {
        Pj.artPagingJudge($(this));
    });
    // 关键字搜索
    $('#allWrap').on('click', '.art-search-btn', function() {
        Pj.artSearch($.trim($(this).prev().val()));
    });
    // 关键字搜索
    $('#allWrap').on('change', '.art-type', function() {
        Pj.artPagingGo('1', $(this).val(), '');
    });

    /**
     * 地区管理
     */
    $('#allWrap').on('click', '.area-add-dom', function() {
        Pj.areaAddDom($(this));
    });
    // 图标选择
    $('#allWrap').on('click', '.aera-icon-wrap li', function() {
        Pj.aeraSelectIcon($(this));
    });
    // 地区操作
    $('#allWrap').on('click', '.area-del', function() {
        Pj.areaDel($(this));
    });
    $('#allWrap').on('click', '.area-copy', function() {
        Pj.areaCopy($(this));
    });
    /**
     * 服务商管理
     */
    $('#allWrap').on('click', '.provider-add-dom', function() {
        Pj.providerAddDom($(this));
    });
}(jQuery);
