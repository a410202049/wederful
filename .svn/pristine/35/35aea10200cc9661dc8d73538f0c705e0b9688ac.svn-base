<?php
namespace Home\Controller;
use Think\Controller;

class IndexController extends Controller {
    public function index() {
        $product = M('product');
        $dao = M();
        $promotionData = $dao->query("SELECT * from product as po INNER JOIN (SELECT p.product_id,child.`value` from package as p INNER JOIN (SELECT `value`,package_id from promotion as pr LEFT JOIN (SELECT min(promotion_id) a,package_id from package_promotion_date GROUP BY package_id ) as c on pr.id = c.a) as child on p.id = child.package_id) as pack on po.id = pack.product_id ORDER BY RAND() LIMIT 6;");
        $this->assign('promotionData',$promotionData);//促销
        $this->display();
    }
    public function productList() {
        $arr = I();
        $destinationid = $arr['destinationid'];
        $categoryId = isset($arr['categoryid']) ? $arr['categoryid'] : 55; //判断是否传分类id 默认为47
        $destination = M('destination');
        $product = M('product');
        $vendors = M('vendors');
        $option = M('ProductCategoryAttrOption');
        $ProductCategory = M('ProductCategory');
        $destinationData = $destination->where(array(
            'id' => $destinationid
        ))->find();
        if (!$destinationData) {
            $this->error('当前目的地不存在');
        }
        $condition = array(
            'category_id' => $categoryId,
            'destination_id' => $destinationid,
            'is_show' => 1,
            'is_del' => 0
        );
        $count = $product->where($condition)->count();// 查询满足要求的总记录数
        $Page = new \Think\Page($count,6);// 实例化分页类 传入总记录数和每页显示的记录数(25)
        $Page->setConfig('prev', '<');
        $Page->setConfig('next', '>');
        $Page->setConfig('theme', '<div class="paging wm bc fs18 tac">%FIRST%%UP_PAGE%%LINK_PAGE%%DOWN_PAGE%%END%</div>');
        $show = $Page->show();// 分页显示输出
        $productData = $product->where($condition)->limit($Page->firstRow.','.$Page->listRows)->select();
        $dao = M();
        foreach ($productData as $key => $value) {
            $vend = $vendors->where(array(
                'id' => $value['vendors_id']
            ))->find();
            $productData[$key]['vendor'] = $vend;
            $category = $ProductCategory->where(array(
                'id' => $value['category_id']
            ))->find();
            $productData[$key]['categoryname'] = $category['name'];
            $price = $dao->query("SELECT min(price) as price from package where product_id = '%s'",$value['id']);
            if($price){
                $productData[$key]['startPrice'] = number_format(usdtosny($price[0]['price']));
            }else{
                 $productData[$key]['startPrice'] = 0;
            }

            $model = M();
            $arrA = array();

            $iconAttrData = $model->table('product_attr_relational as a')->join('product_category_attr as p on a.attr_id = p.id')->where("a.product_id='%s' and p.is_detail = 1",$value['id'])->select();  
            foreach ($iconAttrData as $k => $v) {
                if($v['name']=='场地类型'){
                    $ic = $option->where(array('id'=>$v['value']))->find();
                    $productData[$key]['option'] = $ic['option'];
                }
            }
        }
        $ProductCategoryData = $ProductCategory->where(array(
            'parent_id' => '0'
        ))->select();

        foreach ($ProductCategoryData as $h => $l) {
            $pd = $product->where(array('category_id'=>$l['id'],'is_show'=>'1','is_del'=>'0'))->select();
            if(!$pd){
                $ProductCategoryData[$h]['is_show'] = 0;
            }else{
                $ProductCategoryData[$h]['is_show'] = 1;
            }
        }
        
        $pageNum =$arr['p'] ? $arr['p'] : 1;
        $this->assign('destinationData', $destinationData);
        $this->assign('ProductCategoryData', $ProductCategoryData);
        $this->assign('productData', $productData);
        $this->assign('page',$show);// 赋值分页输出
        $this->assign('destinationid',$destinationid);
        $this->assign('categoryId',$categoryId);
        $this->assign('pageNum',$pageNum);
        $this->display();
    }
    public function productDetail() {
        $arr = I();
        $pid = $arr['pid'];
        $product = M('product');
        $vendors = M('vendors');
        $package = M('package');
        $notice = M('notice');
        $categoryAttr = M('ProductCategoryAttr');
        $option = M('ProductCategoryAttrOption');
        $relation = M('ProductAttrRelational');
        $category = M('ProductCategory');
        $addValue = M('PackageAddValueService');
        $iconManage= M('IconManager');
        $detailImages = M('ProductDetailImages');
        $productData = $product->where(array('id'=>$pid))->find();
        $vendorsData = $vendors->where(array('id'=>$productData['vendors_id']))->find();
        $detailImagesData = $detailImages->where(array('product_id'=>$pid))->select();
        $packageData = $package->where(array('product_id'=>$pid))->order('package_no asc')->select();
        foreach ($packageData as $key => $value) {
            $addService = $addValue->where(array('package_id'=>$value['id']))->select();
            foreach ($addService as $k => $v) {
                $addService[$k]['price'] = number_format(usdtosny($addService[$k]['price']));
            }
            $packageData[$key]['addValue'] = $addService;
            $packageData[$key]['price'] = number_format(usdtosny($packageData[$key]['price']));
        }

        $model = M();
        $iconAttrData = $model->table('product_attr_relational as a')->join('product_category_attr as p on a.attr_id = p.id')->where("a.product_id='%s' and p.is_detail = 1",$pid)->select();  

        foreach ($iconAttrData as $k => $v) {
           if($v['type']=='input' || $v['type']=='textarea'){
                $icon = $iconManage->where(array('id'=>$v['icon_id']))->find();
           }else{
                // print_r($v['value']);
                $ic = $option->where(array('id'=>$v['value']))->find();
                $icon = $iconManage->where(array('id'=>$ic['icon_id']))->find();
                $icon['option'] = $ic['option'];
           }
           $iconAttrData[$k]['icon'] = $icon;
        }

        $textAttrData = $model->table('product_attr_relational as a')->join('product_category_attr as p on a.attr_id = p.id')->where("a.product_id='%s' and p.is_detail = 0",$pid)->select();
        $noticeData =$notice->where(array('product_id'=>$pid))->find();
        $productData['vendorLogo'] = $vendorsData['icon'];
        $productData['vendorName'] = $vendorsData['name'];
        $productData['ImagesData'] = $detailImagesData;
        $productData['packageData'] = $packageData;
        $productData['noticeData'] = $noticeData;
        $productData['iconAttrData'] = $iconAttrData;
        $productData['textAttrData'] = $textAttrData;

        $rand = $product->limit(12)->where(array('is_show'=>1,'is_del'=>0))->order('rand()')->select();
        $this->assign('rand', $rand);
        $this->assign('randLength', ceil(count($rand)/3));
        $this->assign('productData', $productData);
        $this->display();
    }
    //留言页面
    public function custom() {
        $this->display();
    }
    //处理留言
    public function customMessage() {
        $arr = I();
        $str = "";
        if ($arr['phone']) {
            if (!preg_match("/1[3458]{1}\d{9}$/", $arr['phone'])) {
                $this->resultMsg('error', '请输入正确的电话号码');
            }
            $str = '<br>手机号：' . $arr['phone'];
        }
        if ($arr['email']) {
            if (!preg_match("/[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-z]{2,4}/", $arr['email'])) {
                $this->resultMsg('error', '请输入正确邮箱');
            }
            $str = '<br>邮箱：' . $arr['email'];
        }
        if ($arr['weixin']) {
            $str = '<br>微信：' . $arr['weixin'];
        }
        if (!$arr['name']) {
            $this->resultMsg('error', '请输入名字');
        }
        $customMessage = M('CustomMessage');
        $arr['createtime'] = date('Y-m-d H:i:s');
        $customMessage->data($arr)->add();
        sendMail('hi@wederful.com', 'wederful用户定制留言', '用户名：' . $arr['name'] . '<br>目的地：' . $arr['destination'] . '<br>期待婚礼类型：' . $arr['type'] . '<br>亲友人数：' . $arr['number'] . $str);
        $this->resultMsg('success', '提交成功');
    }

    public function fullpage(){
        $this->display();
    }

    /**
     * [articleList 文章列表页]
     * @return [type] [description]
     */
    public function articleList(){
        $arr = I();
        $article = M('article');
        $articleCategory = M('article_category');
        $articleCategorys = $articleCategory->select();

        $where = array('is_show'=>'1','is_del'=>'0');
        if($arr['category']){
            $where['category_id'] = $arr['category'];
        }
        // $list = $article->where($where)->order('createtime')->select();
        $listHot = $article->where(array('is_show'=>'1','is_del'=>'0'))->order('visit_num desc')->limit(0,5)->select();


        $count = $article->where($where)->count();// 查询满足要求的总记录数
        $Page = new \Think\Page($count,10);// 实例化分页类 传入总记录数和每页显示的记录数(25)
        $Page->setConfig('prev', '<');
        $Page->setConfig('next', '>');
        $Page->setConfig('theme', '<div class="paging wm bc fs18 tac">%FIRST%%UP_PAGE%%LINK_PAGE%%DOWN_PAGE%%END%</div>');
        $show = $Page->show();// 分页显示输出
        $list = $article->where($where)->limit($Page->firstRow.','.$Page->listRows)->order('is_top desc')->select();

        $this->assign('categorys',$articleCategorys);
        $this->assign('page', $show);
        $this->assign('list', $list);
        $this->assign('listHot', $listHot);
        $this->display();
    }

    public function articleDetail(){
        $arr =I();
        $article = M('article');
        $tags = M('articleTags');
        $relational = M('articleTagsRelational');
        $articleCategory = M('article_category');
        $articleCategorys = $articleCategory->select();

        $article->where(array('id'=>$arr['id']))->setInc('visit_num');
        $data = $article->where(array('id'=>$arr['id']))->find();
        $listHot = $article->where(array('is_show'=>'1','is_del'=>'0'))->order('visit_num desc')->limit(0,5)->select();
        $relat = $relational->where(array('article_id'=>$arr['id']))->select();
        $aboutArticle = "";
        
        if($relat){
            $tag = array();
            $t = array();
            foreach ($relat as $key => $value) {
                $d = $tags->where(array('id'=>$value['tags_id']))->find();
                $tag[$key]['name'] = $d['name'];
                $tag[$key]['id'] = $d['id'];
                if($d){              
                    $t[$key][] = 'eq';
                    $t[$key][] = $d['id'];
                }
            }
            if($t){
                array_push($t, 'or');
                $condition = array();
                $condition['tags_id'] = $t;
                $condition['article_id'] = array('neq',$arr['id']);
                $about = $relational->distinct(true)->field('article_id')->where($condition)->select();
                if($about){
                    $about = i_array_column($about,'article_id');
                    $con['id']= array('in',$about);
                    $con['is_show']= '1';
                    $aboutArticle = $article->where($con)->limit(0,2)->select();
                }
            }
        }

        $this->assign('aboutArticle', $aboutArticle);
        $this->assign('listHot', $listHot);
        $this->assign('categorys',$articleCategorys);
        $this->assign('data', $data);
        $this->assign('tag', $tag);
        $this->display();
    }

    /**
     * [praise 点赞]
     * @return [type] [description]
     */
    public function praise(){
        $arr = I();
        $articleId = $arr['aid'];
        if($articleId){        
            $article = M('article');
            $article->where(array('id'=>$articleId))->setInc('praise_num');
            $praise_num = $article->field('praise_num')->where(array('id'=>$articleId))->find();
            $this->resultMsg('success', '点赞成功',$praise_num);
        }
    }

    /**
     * [updateRate 实时更新汇率]
     * @return [type] [description]
     */
    public function updateRate(){
        $rate = usdtosnyApi();
        $system = M('system_seting');
        $where = array('name'=>'rate');
        $system->where($where)->data(array('value'=>$rate))->save();
        $this->resultMsg('success', '更新汇率成功');
    }

    /**
     * [resultMsg 公共信息返回]
     * @param  [type] $status [返回状态,success或error]
     * @param  [type] $msg    [返回消息]
     * @param  string $data   [返回值]
     * @return [type]         [json]
     */
    Public function resultMsg($status, $msg, $data = '') {
        $array['status'] = $status;
        $array['message'] = $msg;
        $array['data'] = $data;
        $this->ajaxReturn($array, 'json');
    }
}
